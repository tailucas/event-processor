#!/usr/bin/env python
import argparse
import os

from getpass import getpass
from sys import stderr, exit

from resin.auth import Auth
from resin.models.application import Application
from resin.models.environment_variables import ServiceEnvVariable
from resin.models.device import Device

AUTH_TOKEN_VAR = 'AUTH_TOKEN_RESIN'
API_KEY_VAR = 'RESIN_API_KEY'
DEVICE_UUID_VAR = 'RESIN_DEVICE_UUID'


def log(message):
    stderr.writelines('{}\n'.format(message))


if __name__ == "__main__":
    # arguments
    parser = argparse.ArgumentParser(description='Resin API helper. '
                                                 'Set environment variable {} with auth token or {} with API key'
                                     .format(AUTH_TOKEN_VAR, API_KEY_VAR))
    parser.add_argument('resource_id',
                        help='Resin resource.', nargs='?')
    app_group = parser.add_mutually_exclusive_group()
    app_group.add_argument('--get-api-key', action='store_true',
                        help='Fetch the API key for the named application.')
    app_group.add_argument('--get-devices', action='store_true',
                        help='List devices as name:IP pairs for the named application.')
    app_group.add_argument('--get-app-id', action='store_true',
                        help='Get the Resin application ID for the named application.')
    app_group.add_argument('--get-app-env', action='store_true',
                        help='Get the environment variables for the named application.')
    app_group.add_argument('--get-device-ip', action='store_true',
                        help='Get the IP address for the named device.')
    app_group.add_argument('--get-device-name', action='store_true',
                        help='Get the name for this device or UUID')
    args = parser.parse_args()

    if API_KEY_VAR not in os.environ:
        auth = Auth()
        auth_token = None
        if AUTH_TOKEN_VAR in os.environ:
            auth_token = os.environ.get(AUTH_TOKEN_VAR)
        else:
            auth_token = getpass(prompt='Resin Auth Token:')
        if auth_token and len(auth_token.strip()) > 0:
            auth.login_with_token(auth_token)
            log('Authenticated to Resin.io APIs using {} ({}). Please retry.'.format(auth.who_am_i(), auth.get_email()))

    # environment variables
    device_uuid = None
    if DEVICE_UUID_VAR in os.environ:
        device_uuid = os.environ.get(DEVICE_UUID_VAR)

    # log some info about the device context
    device = Device()
    device_name = None
    app_name = None
    if device_uuid:
        device_name = device.get_name(device_uuid)
        app_name = device.get_application_name(device_uuid)
        log("Device '{}' is running application '{}'".format(device_name, app_name))

    # application as the named resource
    application = Application()
    if args.get_api_key:
        log("Retrieving API key for application '{}'".format(args.resource_id))
        print(application.get_api_key(args.resource_id))

    if args.get_devices:
        devices = None
        if args.resource_id:
            log("Retrieving devices for application '{}'".format(args.resource_id))
            devices = device.get_all_by_application(args.resource_id)
        else:
            log("Retrieving all devices")
            devices = device.get_all()
        for d in devices:
            # work around Device.get_local_ip_address(uuid) eventual
            # consistency issues with the VPN addresses.
            print('{}:{}'.format(d['name'], d['ip_address'].split()[0]))

    if args.get_app_id or args.get_app_env:
        # resource ID is the application name for either of these functions
        if args.resource_id:
            app_name = args.resource_id
        if not app_name:
            log("No application specified.")
            exit(1)
        log("Retrieving ID for application '{}'".format(app_name))
        app_id = application.get(app_name)['id']
        if args.get_app_id:
            print(app_id)

    if args.get_app_env:
        app_env = ServiceEnvVariable()
        log("Retrieving environment variables for application ID '{}'".format(app_id))
        env_vars = app_env.get_all(app_id)
        env_var_map = {}
        for env_var in env_vars:
            env_var_map[env_var['name']] = env_var['value']
        for env_var in sorted(env_var_map.keys()):
            print('{}="{}"'.format(env_var, env_var_map[env_var]))

    if args.get_device_ip:
        if args.resource_id:
            log("Retrieving IP for device '{}'".format(args.resource_id))
            devices = device.get_by_name(args.resource_id)
            if len(devices) > 1:
                raise "'{}' ambiguous across applications.".format(args.resource_id)
            print(devices[0]['ip_address'].split()[0])
        elif device_uuid:
            log("Retrieving IP for device '{}'".format(device_name))
            print(device.get(device_uuid)['ip_address'].split()[0])

    if args.get_device_name:
        if args.resource_id:
            log("Retrieving device name for UUID {}".format(args.resource_id))
            print(device.get_name(args.resource_id))
        print(device_name)
